// This file is part of the ACTS project.
//
// Copyright (C) 2016 CERN for the benefit of the ACTS project
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

#include <boost/test/execution_monitor.hpp>
#include <boost/test/unit_test.hpp>

#include "Acts/Geometry/GeometryContext.hpp"
#include "Acts/Surfaces/AnnulusBounds.hpp"
#include "Acts/Surfaces/DiscSurface.hpp"
#include "Acts/Surfaces/PlanarBounds.hpp"
#include "Acts/Surfaces/PlaneSurface.hpp"
#include "Acts/Surfaces/RectangleBounds.hpp"
#include "Acts/Surfaces/RegularSurface.hpp"
#include "Acts/Surfaces/TrapezoidBounds.hpp"

#include <iostream>
#include <limits>

namespace Acts::Test {

GeometryContext gctx;

std::size_t matrixResolution = 80;

struct TestMatrix : public std::vector<std::vector<std::uint8_t>> {
  TestMatrix()
      : std::vector<std::vector<std::uint8_t>>(
            matrixResolution, std::vector<std::uint8_t>(matrixResolution, 0)) {
        };
};

std::pair<Vector2, Vector2> boundingBox(const RegularSurface& surface,
                                        double relMargin = 0.1) {
  Vector2 min{std::numeric_limits<double>::max(),
              std::numeric_limits<double>::max()};
  Vector2 max{std::numeric_limits<double>::lowest(),
              std::numeric_limits<double>::lowest()};

  std::vector<Vector2> vertices;
  if (const auto* pBounds =
          dynamic_cast<const PlanarBounds*>(&surface.bounds());
      pBounds) {
    vertices = pBounds->vertices();
  } else if (const auto* dBounds =
                 dynamic_cast<const DiscBounds*>(&surface.bounds());
             dBounds) {
    vertices = dBounds->vertices();
  } else {
    throw std::runtime_error("Unsupported bounds type");
  }

  for (const auto& vertex : vertices) {
    min = min.cwiseMin(vertex);
    max = max.cwiseMax(vertex);
  }

  Vector2 size = max - min;

  min = min - relMargin * size;
  max = max + relMargin * size;

  Vector3 min3 = surface.transform(gctx) * Vector3{min[0], min[1], 0};
  Vector3 max3 = surface.transform(gctx) * Vector3{max[0], max[1], 0};

  return {min3.head<2>(), max3.head<2>()};
}

TestMatrix makeTestMatrix(const RegularSurface& surface,
                          const BoundaryTolerance& tolerance) {
  auto [min, max] = boundingBox(surface);
  Vector2 delta = max - min;

  TestMatrix testMatrix;

  Vector2 step = delta / (matrixResolution - 1);

  for (std::size_t i = 0; i < matrixResolution; ++i) {
    for (std::size_t j = 0; j < matrixResolution; ++j) {
      Vector2 query = min + Vector2(j, i).cwiseProduct(step);
      Vector2 local =
          surface.globalToLocal(gctx, Vector3{query[0], query[1], 0}).value();
      bool inside = surface.bounds().inside(local, tolerance);
      testMatrix.at(i).at(j) = inside ? 1 : 0;
    }
  }

  return testMatrix;
}

void printTestMatrix(const TestMatrix& matrix) {
  for (const auto& row : matrix) {
    for (std::uint8_t inside : row) {
      std::cout << (inside == 1 ? "X" : ".");
    }
    std::cout << std::endl;
  }
}

TestMatrix parseMatrix(const std::string& matrix) {
  TestMatrix result;

  std::size_t i = 0;
  std::size_t j = 0;

  for (auto it = matrix.find_first_not_of("\n "); it < matrix.size(); it++) {
    const char c = matrix.at(it);
    if (c == ' ') {
      continue;
    }
    if (c == '\n') {
      i += 1;
      j = 0;
      continue;
    }
    if (c == '.') {
      result.at(i).at(j) = 0;
    } else if (c == 'X') {
      result.at(i).at(j) = 1;
    }
    j += 1;
  }

  return result;
}

void printMatrixDiff(const TestMatrix& ref, const TestMatrix& act) {
  bool tty = isatty(fileno(stdout)) != 0;

  auto red = [tty](const std::string& s) {
    if (!tty) {
      return s;
    }
    return "\033[1;31m" + s + "\033[0m";
  };

  auto green = [tty](const std::string& s) {
    if (!tty) {
      return s;
    }
    return "\033[1;32m" + s + "\033[0m";
  };

  for (std::size_t i = 0; i <= matrixResolution - 1; ++i) {
    for (std::size_t j = 0; j <= matrixResolution - 1; ++j) {
      // std::cout << i << " " << j << std::endl;
      bool insideRef = ref.at(i).at(j) == 1;
      bool insideAct = act.at(i).at(j) == 1;
      if (!insideRef && !insideAct) {
        std::cout << ".";
      }
      if (insideRef && !insideAct) {
        std::cout << red("R");
      }
      if (!insideRef && insideAct) {
        std::cout << green("X");
      }
      if (insideRef && insideAct) {
        std::cout << "o";
      }
    }
    std::cout << std::endl;
  }

  std::cout << red("R: inside reference but not inside actual") << std::endl;
  std::cout << green("X: not inside reference but inside actual") << std::endl;
  std::cout << "o: inside both" << std::endl;
  std::cout << ".: outside both" << std::endl;
}

BOOST_AUTO_TEST_SUITE(Surfaces)

BOOST_AUTO_TEST_CASE(Rectangle) {
  std::string reference = R"X(
................................................................................
................................................................................
................................................................................
................................................................................
................................................................................
................................................................................
................................................................................
.......XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.......
.......XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.......
.......XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.......
.......XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.......
.......XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.......
.......XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.......
.......XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.......
.......XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.......
.......XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.......
.......XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.......
.......XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.......
.......XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.......
.......XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.......
.......XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.......
.......XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.......
.......XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.......
.......XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.......
.......XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.......
.......XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.......
.......XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.......
.......XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.......
.......XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.......
.......XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.......
.......XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.......
.......XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.......
.......XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.......
.......XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.......
.......XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.......
.......XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.......
.......XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.......
.......XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.......
.......XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.......
.......XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.......
.......XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.......
.......XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.......
.......XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.......
.......XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.......
.......XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.......
.......XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.......
.......XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.......
.......XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.......
.......XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.......
.......XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.......
.......XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.......
.......XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.......
.......XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.......
.......XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.......
.......XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.......
.......XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.......
.......XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.......
.......XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.......
.......XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.......
.......XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.......
.......XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.......
.......XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.......
.......XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.......
.......XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.......
.......XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.......
.......XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.......
.......XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.......
.......XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.......
.......XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.......
.......XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.......
.......XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.......
.......XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.......
.......XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.......
................................................................................
................................................................................
................................................................................
................................................................................
................................................................................
................................................................................
................................................................................
  )X";
  TestMatrix referenceMatrix = parseMatrix(reference);

  auto bounds = std::make_shared<RectangleBounds>(10, 20);
  auto surface =
      Surface::makeShared<PlaneSurface>(Transform3::Identity(), bounds);
  BoundaryTolerance tolerance = BoundaryTolerance::None();

  TestMatrix testMatrix = makeTestMatrix(*surface, tolerance);

  if (testMatrix != referenceMatrix) {
    printMatrixDiff(referenceMatrix, testMatrix);
    BOOST_FAIL("Test matrix does not match reference matrix");
  }
}

BOOST_AUTO_TEST_CASE(Trapezoid) {
  std::string reference = R"X(
................................................................................
................................................................................
................................................................................
................................................................................
................................................................................
................................................................................
................................................................................
.....................................................XX.........................
..................................................XXXXX.........................
...............................................XXXXXXXXX........................
............................................XXXXXXXXXXXX........................
........................................XXXXXXXXXXXXXXXXX.......................
.....................................XXXXXXXXXXXXXXXXXXXX.......................
..................................XXXXXXXXXXXXXXXXXXXXXXX.......................
...............................XXXXXXXXXXXXXXXXXXXXXXXXXXX......................
............................XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX......................
........................XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.....................
......................XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.....................
......................XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.....................
.....................XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX....................
.....................XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX....................
.....................XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX...................
....................XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX...................
....................XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX...................
....................XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX..................
....................XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX..................
...................XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.................
...................XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.................
...................XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.................
...................XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX................
..................XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX................
..................XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX...............
..................XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX...............
..................XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX...............
.................XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX..............
.................XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX..............
.................XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.............
.................XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.............
................XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.............
................XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX............
................XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX............
...............XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX............
...............XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX...........
...............XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX...........
...............XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX..........
..............XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX..........
..............XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX..........
..............XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.........
..............XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.........
.............XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX........
.............XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX........
.............XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX........
.............XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.......
............XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX..........
............XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.............
............XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX................
...........XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX....................
...........XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.......................
...........XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX..........................
...........XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.............................
..........XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.................................
..........XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX....................................
..........XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.......................................
..........XXXXXXXXXXXXXXXXXXXXXXXXXXXX..........................................
.........XXXXXXXXXXXXXXXXXXXXXXXXX..............................................
.........XXXXXXXXXXXXXXXXXXXXXX.................................................
.........XXXXXXXXXXXXXXXXXXX....................................................
.........XXXXXXXXXXXXXXXX.......................................................
........XXXXXXXXXXXXX...........................................................
........XXXXXXXXXX..............................................................
........XXXXXXX.................................................................
.......XXXXX....................................................................
.......X........................................................................
................................................................................
................................................................................
................................................................................
................................................................................
................................................................................
................................................................................
................................................................................
  )X";
  TestMatrix referenceMatrix = parseMatrix(reference);

  auto bounds = std::make_shared<TrapezoidBounds>(10, 20, 5, 0.1);
  auto surface =
      Surface::makeShared<PlaneSurface>(Transform3::Identity(), bounds);
  BoundaryTolerance tolerance = BoundaryTolerance::None();

  TestMatrix testMatrix = makeTestMatrix(*surface, tolerance);

  if (testMatrix != referenceMatrix) {
    printMatrixDiff(referenceMatrix, testMatrix);
    BOOST_FAIL("Test matrix does not match reference matrix");
  }
}

BOOST_AUTO_TEST_CASE(Annulus) {
  std::string reference = R"X(
................................................................................
................................................................................
................................................................................
................................................................................
................................................................................
................................................................................
................................................................................
....................................X...........................................
...................................XXX..........................................
...................................XXXX.........................................
..................................XXXXXXX.......................................
..................................XXXXXXXX......................................
.................................XXXXXXXXXXX....................................
................................XXXXXXXXXXXXX...................................
................................XXXXXXXXXXXXXX..................................
...............................XXXXXXXXXXXXXXXXX................................
..............................XXXXXXXXXXXXXXXXXXX...............................
..............................XXXXXXXXXXXXXXXXXXXXX.............................
.............................XXXXXXXXXXXXXXXXXXXXXXX............................
............................XXXXXXXXXXXXXXXXXXXXXXXXX...........................
...........................XXXXXXXXXXXXXXXXXXXXXXXXXXXX.........................
..........................XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX........................
.........................XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX......................
........................XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.....................
.......................XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX....................
......................XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX..................
.....................XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.................
....................XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX...............
..................XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX..............
.................XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.............
................XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX...........
..............XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX..........
............XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX........
...........XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.......
.........XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX........
.......XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.........
.......XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.........
........XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX..........
........XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX...........
........XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX............
.........XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.............
.........XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.............
.........XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX..............
..........XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX...............
..........XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX................
..........XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.................
..........XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX..................
...........XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX...................
...........XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX....................
...........XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.....................
............XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.......................
............XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX........................
............XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.........................
.............XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX..........................
.............XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX............................
.............XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.............................
.............XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX..............................
..............XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX................................
..............XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.................................
..............XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX...................................
...............XXXXXXXXXXXXXXXXXXXXXXXXXXXXX....................................
...............XXXXXXXXXXXXXXXXXXXXXXXXXXX......................................
...............XXXXXXXXXXXXXXXXXXXXXXXXXX.......................................
................XXXXXXXXXXXXXXXXXXXXXXX.........................................
................XXXXXXXXXXXXXXXXXXXXX...........................................
................XXXXXXXXXXXXXXXXXXX.............................................
................XXXXXXXXXXXXXXXXX...............................................
.................XXXXXXXXXXXXXX.................................................
.................XXXXXXXXXXXX...................................................
.................XXXXXXXXXX.....................................................
..................XXXXXXX.......................................................
..................XXXX..........................................................
..................XX............................................................
................................................................................
................................................................................
................................................................................
................................................................................
................................................................................
................................................................................
................................................................................
  )X";

  TestMatrix referenceMatrix = parseMatrix(reference);

  const double minRadius = 7.2;
  const double maxRadius = 12.0;
  const double minPhi = 0.74195;
  const double maxPhi = 1.33970;

  const Vector2 offset(-2., 2.);

  auto bounds = std::make_shared<AnnulusBounds>(minRadius, maxRadius, minPhi,
                                                maxPhi, offset);
  auto surface =
      Surface::makeShared<DiscSurface>(Transform3::Identity(), bounds);
  BoundaryTolerance tolerance = BoundaryTolerance::None();

  TestMatrix testMatrix = makeTestMatrix(*surface, tolerance);

  if (testMatrix != referenceMatrix) {
    printMatrixDiff(referenceMatrix, testMatrix);
    BOOST_FAIL("Test matrix does not match reference matrix");
  }
}

BOOST_AUTO_TEST_SUITE_END()
}  // namespace Acts::Test

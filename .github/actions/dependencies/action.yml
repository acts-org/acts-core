name: "Dependencies action"
description: "Reusable action that sets up dependencies for the ACTS CI build"
inputs:
  xcode-version:
    description: "Which Xcode version to use (only for macOS)"
    required: true
    default: "16.0.0"
  dependency-tag:
    description: "Which dependency tag to use"
    required: true
    default: "v6-test3"
runs:
  using: "composite"
  steps:
    - name: Set up Spack
      uses: spack/setup-spack@v2

    - name: Apply spack patch
      shell: bash
      working-directory: spack
      run: |
        git config user.name github-actions[bot]
        git config user.email 41898282+github-actions[bot]@users.noreply.github.com
        curl https://patch-diff.githubusercontent.com/raw/spack/spack/pull/47370.patch | git am


    - name: Add spack buildcache mirror
      shell: bash
      run: |
        spack mirror add acts-spack-buildcache oci://ghcr.io/acts-project/spack-buildcache --unsigned

    - name: Locate OpenGL
      shell: bash
      run: "${GITHUB_ACTION_PATH}/opengl.sh"

    - name: Get spack lock file name
      shell: bash
      run: |
        arch=$(spack arch --family)
        if [[ $arch == darwin* ]]; then
          lock_file="spack-${arch}-xcode${{ inputs.xcode-version }}.lock"
          lock_file_g4="spack-${arch}-xcode${{ inputs.xcode-version }}-geant4-data.lock"
        else
          lock_file="spack-${arch}.lock"
          lock_file_g4="spack-${arch}-geant4-data.lock"
        fi

        echo "Lock file: ${lock_file}"
        echo "Lock file G4: ${lock_file_g4}"
        echo "SPACK_LOCK_FILE=${lock_file}" >> "$GITHUB_ENV"
        echo "SPACK_LOCK_FILE_G4=${lock_file_g4}" >> "$GITHUB_ENV"

    - name: Setup Xcode version
      if: startsWith(runner.os, 'macos')
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: "${{ inputs.xcode-version }}"

    - name: Get spack lock files from tag
      shell: bash
      run: |
        url="https://github.com/acts-project/ci-dependencies/releases/download/${{ inputs.dependency-tag }}/${SPACK_LOCK_FILE}"
        echo "URL: ${url}"
        curl -L -o spack.lock $url
        g4url="https://github.com/acts-project/ci-dependencies/releases/download/${{ inputs.dependency-tag }}/${SPACK_LOCK_FILE_G4}"
        echo "URL: ${g4url}"
        curl -L -o spack-g4.lock $g4url

    - name: Create spack environment
      shell: bash
      run: |
        NCPUS=32 # we're only downloading

        time spack env create ci spack.lock --with-view $PWD/dependencies &
        time spack env create ci-g4 spack-g4.lock &
        wait

        time spack -e ci spec
        time spack -e ci find

        time ${GITHUB_ACTION_PATH}/parallel.sh $NCPUS spack -e ci install --use-buildcache only &
        time ${GITHUB_ACTION_PATH}/parallel.sh $NCPUS spack -e ci-g4 install &
        wait

        "${GITHUB_ACTION_PATH}/with_spack_env.sh" ci-g4 env | grep G4 >> "$GITHUB_ENV"

    - name: Configure downstream environment
      shell: bash
      run: |
        echo "$PWD/dependencies/bin" >> "$GITHUB_PATH"
        echo "CMAKE_PREFIX_PATH=$PWD/dependencies" >> "$GITHUB_ENV"
        echo "LD_LIBRARY_PATH=${destination}/lib" >> "$GITHUB_ENV"
        echo "ROOT_INCLUDE_PATH=${destination}/include" >> "$GITHUB_ENV"
        # # Geant4 puts CLHEP in a subdirectory
        # set_env ROOT_INCLUDE_PATH "${destination}/include/Geant4"
        # Pythia8 looks for settings in this directory
        echo "PYTHIA8DATA=${destination}/share/Pythia8/xmldoc" >> "$GITHUB_ENV"

    - name: Prepare python environment
      shell: bash
      run: |
        ls -al
        venv_dir="$PWD/dependencies/venv"
        python3 -m venv "$venv_dir"
        echo "${venv_dir}/bin" >> "$GITHUB_PATH"
        ls -al "${venv_dir}/bin"
